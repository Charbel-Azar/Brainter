[
    {
        "id": "ee9757178de2cc83",
        "type": "tab",
        "label": "Mental Commands",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "41996be6d96fa283",
        "type": "tab",
        "label": "Emotion Finder",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "066e4ad3331afd38",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a1fe27bb3f369924",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "308f09ba75c30f2f",
        "type": "ui_tab",
        "name": "Brainter",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d7908651.24f9b8",
        "type": "ui_tab",
        "name": "Tab 1",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3085cb252d0df0c1",
        "type": "openaiApiKey",
        "name": "Personal"
    },
    {
        "id": "f1f542807e71d6ca",
        "type": "function",
        "z": "ee9757178de2cc83",
        "name": "Trigger Image Generation",
        "func": "// Retrieve the 'imageGenerated' flag from the context, defaulting to false if not set\nlet imageGenerated = context.get('imageGenerated') || false;\n\n// Check if an image has already been generated\nif (imageGenerated) {\n    // If an image was already generated, do nothing and return null to stop the flow\n    return null;\n}\n\n// Check the payload for a command and return an appropriate image generation payload\nif (msg.payload === 'Right') {\n    // Set the 'imageGenerated' flag to true to prevent further triggers\n    context.set('imageGenerated', true);\n    return { payload: 'generate me an image of a cat' };\n} else if (msg.payload === 'Left') {\n    // Set the 'imageGenerated' flag to true to prevent further triggers\n    context.set('imageGenerated', true);\n    return { payload: 'generate me an abstract image of the color red' };\n} else {\n    // If the payload is neither 'Right' nor 'Left', do nothing and return null\n    return null;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 340,
        "wires": [
            [
                "c99ee12a6cc850f0"
            ]
        ]
    },
    {
        "id": "fd3586c96f2c26c2",
        "type": "EMOTIV",
        "z": "ee9757178de2cc83",
        "name": "EMOTIV",
        "x": 160,
        "y": 420,
        "wires": [
            [
                "2e48835dac3ff48f"
            ]
        ]
    },
    {
        "id": "2e48835dac3ff48f",
        "type": "Profile-Name",
        "z": "ee9757178de2cc83",
        "name": "Profile Name",
        "profileName": "Charbel",
        "x": 360,
        "y": 360,
        "wires": [
            [
                "919dfb9ef8244c15",
                "c2fe43f5a6814f55"
            ]
        ]
    },
    {
        "id": "de45441b395d991d",
        "type": "function",
        "z": "ee9757178de2cc83",
        "name": "Detect first command",
        "func": "\n\n// Retrieve the 'commandTriggered' flag from the context, defaulting to false if not set\nlet commandTriggered = context.get('commandTriggered') || false;\n\n// Check if a command has already been triggered\nif (commandTriggered) {\n  // If a command was already triggered, do nothing and return null to stop the flow\n  return null;\n}\n\n// Check which command is received and if it passes the threshold\nif (msg.payload === \"Left\") {\n  msg.payload = \"Left\";\n  // Set the 'commandTriggered' flag to true to prevent further triggers\n  context.set('commandTriggered', true);\n} else if (msg.payload === \"Right\" ) {\n  msg.payload = \"Right\";\n  // Set the 'commandTriggered' flag to true to prevent further triggers\n  context.set('commandTriggered', true);\n} else {\n  // If neither command passes the threshold, do nothing and return null\n  return null;\n}\n\n// Return the message object to continue the flow\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 340,
        "wires": [
            [
                "f1f542807e71d6ca",
                "3a6c31c21d3e97b5"
            ]
        ]
    },
    {
        "id": "919dfb9ef8244c15",
        "type": "Mental-Command",
        "z": "ee9757178de2cc83",
        "name": "Mental Commands",
        "actionName": "left",
        "mcSen": 10,
        "x": 570,
        "y": 300,
        "wires": [
            [
                "8efe1e4d6744837e"
            ]
        ]
    },
    {
        "id": "c2fe43f5a6814f55",
        "type": "Mental-Command",
        "z": "ee9757178de2cc83",
        "name": "Mental Commands",
        "actionName": "right",
        "mcSen": 10,
        "x": 570,
        "y": 440,
        "wires": [
            [
                "a63ffa71846c76f3"
            ]
        ]
    },
    {
        "id": "c99ee12a6cc850f0",
        "type": "file",
        "z": "ee9757178de2cc83",
        "name": "Brainter",
        "filename": "C:\\Users\\charb\\Documents\\GitHub\\Brainter\\Image Sketcher\\node-red-mentalcommand.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1700,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "3a6c31c21d3e97b5",
        "type": "debug",
        "z": "ee9757178de2cc83",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 200,
        "wires": []
    },
    {
        "id": "8efe1e4d6744837e",
        "type": "switch",
        "z": "ee9757178de2cc83",
        "name": "Threshold 50",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "90",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 830,
        "y": 300,
        "wires": [
            [
                "bac8be6352a4ed2c"
            ]
        ]
    },
    {
        "id": "a63ffa71846c76f3",
        "type": "switch",
        "z": "ee9757178de2cc83",
        "name": "Threshold 50",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "70",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 830,
        "y": 440,
        "wires": [
            [
                "f962ac8fc85ee126",
                "17976bb15301df31"
            ]
        ]
    },
    {
        "id": "bac8be6352a4ed2c",
        "type": "function",
        "z": "ee9757178de2cc83",
        "name": "Write command",
        "func": "if (msg.payload > 90) {\n    msg.payload = \"Left\";\n    // Set the 'commandTriggered' flag to true to prevent further triggers\n\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 300,
        "wires": [
            [
                "de45441b395d991d"
            ]
        ]
    },
    {
        "id": "f962ac8fc85ee126",
        "type": "function",
        "z": "ee9757178de2cc83",
        "name": "Write command",
        "func": "if (msg.payload > 70) {\n    msg.payload = \"Right\";\n    // Set the 'commandTriggered' flag to true to prevent further triggers\n\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 440,
        "wires": [
            [
                "de45441b395d991d"
            ]
        ]
    },
    {
        "id": "17976bb15301df31",
        "type": "debug",
        "z": "ee9757178de2cc83",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 600,
        "wires": []
    },
    {
        "id": "5707331f2b6bb153",
        "type": "EMOTIV",
        "z": "41996be6d96fa283",
        "name": "EMOTIV",
        "x": 160,
        "y": 380,
        "wires": [
            [
                "1ce3629a6c9015ed"
            ]
        ]
    },
    {
        "id": "1ce3629a6c9015ed",
        "type": "Profile-Name",
        "z": "41996be6d96fa283",
        "name": "Profile Name",
        "profileName": "Charbel",
        "x": 340,
        "y": 320,
        "wires": [
            [
                "f67c04937e09eef9",
                "c708aabacb13520f",
                "ed2c2b040137606a",
                "bd80ab7cf9ce5e6e",
                "5583fa93e96ebf90",
                "e59b89a54aeb9746",
                "89efe5ab657e9fad",
                "5308f49f7f3ca4bd",
                "3b7b13858ec3ee9e",
                "7b1a4f39fe4c53e4",
                "2a401ebd8ec28430",
                "beaea40c5770c499"
            ]
        ]
    },
    {
        "id": "f67c04937e09eef9",
        "type": "Performance-Metric",
        "z": "41996be6d96fa283",
        "name": "Performance Metrics",
        "pm": "excitement",
        "x": 660,
        "y": 240,
        "wires": [
            [
                "ef9b313a915524f7"
            ]
        ]
    },
    {
        "id": "d6661a13d522b65c",
        "type": "function",
        "z": "41996be6d96fa283",
        "name": "Calculate Scores",
        "func": "// Initialize or retrieve the accumulated data from the context\nlet data = context.get('data') || {};\n\n// Update the context with new values as they come\nif (msg.excitement !== undefined) {\n    data.excitement = msg.excitement;\n}\nif (msg.attention !== undefined) {\n    data.attention = msg.attention;\n}\nif (msg.interest !== undefined) {\n    data.interest = msg.interest;\n}\nif (msg.relaxation !== undefined) {\n    data.relaxation = msg.relaxation;\n}\nif (msg.stress !== undefined) {\n    data.stress = msg.stress;\n}\nif (msg.engagement !== undefined) {\n    data.engagement = msg.engagement;\n}\nif (msg.smile !== undefined) {\n    data.smile = msg.smile;\n}\nif (msg.frown !== undefined) {\n    data.frown = msg.frown;\n}\nif (msg.surprise !== undefined) {\n    data.surprise = msg.surprise;\n}\nif (msg.clench !== undefined) {\n    data.clench = msg.clench;\n}\nif (msg.ufNeutral !== undefined) {\n    data.ufNeutral = msg.ufNeutral;\n}\nif (msg.lfNeutral !== undefined) {\n    data.lfNeutral = msg.lfNeutral;\n}\n\n// Save the updated data back to the context\ncontext.set('data', data);\n// Initialize or retrieve the previous emotions' totals and counts from the context\nlet previousTotals = context.get('previousTotals') || { Happy: 0, Sad: 0, Afraid: 0, Angry: 0, Peaceful: 0 };\nlet counts = context.get('counts') || 0; // A single count assuming each set of emotions are updated together\n\n// Check if all required properties are present\nif (data.excitement !== undefined && data.attention !== undefined && data.interest !== undefined &&\n    data.relaxation !== undefined && data.stress !== undefined && data.engagement !== undefined &&\n    data.smile !== undefined && data.frown !== undefined && data.surprise !== undefined &&\n    data.clench !== undefined && data.ufNeutral !== undefined && data.lfNeutral !== undefined) {\n\n    // Compute new values for each emotion\n    let newValues = {\n        Happy: 0.125 * data.excitement + 0.05 * data.attention + 0.075 * data.relaxation + 0.05 * data.stress + 0.125 * data.engagement + 0.075 * data.interest + 0.6 * data.smile,\n        Sad: 0.05 * data.excitement + 0.125 * data.attention + 0.05 * data.relaxation + 0.125 * data.stress + 0.075 * data.engagement + 0.075 * data.interest + 0.6 * data.frown,\n        Afraid: 0.075 * data.excitement + 0.05 * data.attention + 0.05 * data.relaxation + 0.125 * data.stress + 0.125 * data.engagement + 0.075 * data.interest + 0.6 * data.surprise,\n        Angry: 0.075 * data.excitement + 0.05 * data.attention + 0.05 * data.relaxation + 0.125 * data.stress + 0.125 * data.engagement + 0.075 * data.interest + 0.6 * data.clench,\n        Peaceful: 0.05 * data.excitement + 0.125 * data.attention + 0.125 * data.relaxation + 0.05 * data.stress + 0.075 * data.engagement + 0.075 * data.interest + 0.3 * data.ufNeutral + 0.3 * data.lfNeutral\n    };\n\n    // Update cumulative totals and count\n    counts += 1; // Increment the count for averaging\n    Object.keys(previousTotals).forEach(emotion => {\n        previousTotals[emotion] += newValues[emotion];\n    });\n\n    // Compute the average for each emotion\n    let averages = {};\n    Object.keys(previousTotals).forEach(emotion => {\n        averages[emotion] = previousTotals[emotion] / counts;\n    });\n\n    // Update the msg.payload with the averages\n    msg.payload = averages;\n    msg.averages=msg.payload;\n\n    // Save the updated totals and count back to the context for the next execution\n    context.set('previousTotals', previousTotals);\n    context.set('counts', counts);\n\n    // Optionally, you can clear the 'data' context if needed\n    context.set('data', {});\n} else {\n    // If any property is missing, do not proceed with the calculation\n    return null; // This will stop the function and not output any message\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 220,
        "wires": [
            [
                "21ec378b1cadc715"
            ]
        ]
    },
    {
        "id": "c708aabacb13520f",
        "type": "Performance-Metric",
        "z": "41996be6d96fa283",
        "name": "Performance Metrics",
        "pm": "interest",
        "x": 640,
        "y": 300,
        "wires": [
            [
                "d8426a01a64dbccd"
            ]
        ]
    },
    {
        "id": "ed2c2b040137606a",
        "type": "Performance-Metric",
        "z": "41996be6d96fa283",
        "name": "Performance Metrics",
        "pm": "engagement",
        "x": 660,
        "y": 360,
        "wires": [
            [
                "93f0cb5d2011eaed"
            ]
        ]
    },
    {
        "id": "bd80ab7cf9ce5e6e",
        "type": "Performance-Metric",
        "z": "41996be6d96fa283",
        "name": "Performance Metrics",
        "pm": "stress",
        "x": 640,
        "y": 420,
        "wires": [
            [
                "b00b0d055cda8091"
            ]
        ]
    },
    {
        "id": "5583fa93e96ebf90",
        "type": "Performance-Metric",
        "z": "41996be6d96fa283",
        "name": "Performance Metrics",
        "pm": "relaxation",
        "x": 650,
        "y": 480,
        "wires": [
            [
                "55bf7d1a8b4bed26"
            ]
        ]
    },
    {
        "id": "ec15e57ab89d90ed",
        "type": "file",
        "z": "41996be6d96fa283",
        "name": "Brainter",
        "filename": "C:\\Users\\charb\\Documents\\GitHub\\Brainter\\Image Sketcher\\node-red-emotion.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2260,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "e59b89a54aeb9746",
        "type": "Facial-Expression",
        "z": "41996be6d96fa283",
        "name": "Facial Expressions",
        "action": "smile",
        "sens": "10",
        "x": 630,
        "y": 540,
        "wires": [
            [
                "b081739a048357b0"
            ]
        ]
    },
    {
        "id": "89efe5ab657e9fad",
        "type": "Facial-Expression",
        "z": "41996be6d96fa283",
        "name": "Facial Expressions",
        "action": "frown",
        "sens": "0",
        "x": 630,
        "y": 600,
        "wires": [
            [
                "127e148b453eb551"
            ]
        ]
    },
    {
        "id": "5308f49f7f3ca4bd",
        "type": "Facial-Expression",
        "z": "41996be6d96fa283",
        "name": "Facial Expressions",
        "action": "surprise",
        "sens": "0",
        "x": 640,
        "y": 660,
        "wires": [
            [
                "61044ea6da573530"
            ]
        ]
    },
    {
        "id": "3b7b13858ec3ee9e",
        "type": "Facial-Expression",
        "z": "41996be6d96fa283",
        "name": "Facial Expressions",
        "action": "clench",
        "sens": "0",
        "x": 640,
        "y": 720,
        "wires": [
            [
                "4332a6aba0827a29"
            ]
        ]
    },
    {
        "id": "7b1a4f39fe4c53e4",
        "type": "Facial-Expression",
        "z": "41996be6d96fa283",
        "name": "Facial Expressions",
        "action": "uf-neutral",
        "sens": "0",
        "x": 650,
        "y": 780,
        "wires": [
            [
                "1d5ced30a3ab320c"
            ]
        ]
    },
    {
        "id": "2a401ebd8ec28430",
        "type": "Facial-Expression",
        "z": "41996be6d96fa283",
        "name": "Facial Expressions",
        "action": "lf-neutral",
        "sens": "0",
        "x": 640,
        "y": 840,
        "wires": [
            [
                "0a9d2c99cb1fb183"
            ]
        ]
    },
    {
        "id": "beaea40c5770c499",
        "type": "Performance-Metric",
        "z": "41996be6d96fa283",
        "name": "Performance Metrics",
        "pm": "focus",
        "x": 640,
        "y": 160,
        "wires": [
            [
                "9983d9a43145f23d"
            ]
        ]
    },
    {
        "id": "d8426a01a64dbccd",
        "type": "function",
        "z": "41996be6d96fa283",
        "name": "interest",
        "func": "// Set a custom property with your variable\nmsg.interest = msg.payload;\n\n// Make sure to return the msg object to pass it to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 280,
        "wires": [
            [
                "d6661a13d522b65c"
            ]
        ]
    },
    {
        "id": "ef9b313a915524f7",
        "type": "function",
        "z": "41996be6d96fa283",
        "name": "excitement",
        "func": "// Set a custom property with your variable\nmsg.excitement = msg.payload;\n\n// Make sure to return the msg object to pass it to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 200,
        "wires": [
            [
                "d6661a13d522b65c"
            ]
        ]
    },
    {
        "id": "9983d9a43145f23d",
        "type": "function",
        "z": "41996be6d96fa283",
        "name": "focus",
        "func": "// Retrieve the stored value from the context, if it exists\nvar storedValue = context.get('storedValue') || null;\n\n// Check if storedValue has been set before\nif (storedValue === null) {\n    // If not, this is the first message, so store the current payload\n    context.set('storedValue', msg.payload);\n    msg.attention = msg.payload; // Set the new variable with the current payload\n} else {\n    // If storedValue exists, check if the new input is different\n    if (storedValue !== msg.payload) {\n        // If the input is updated (different), update the stored value and the new variable\n        context.set('storedValue', msg.payload);\n        msg.attention = msg.payload;\n    } else {\n        // If the input is the same, keep the stored value\n        msg.attention = storedValue;\n    }\n}\n\n// Make sure to return the msg object to pass it to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 120,
        "wires": [
            [
                "d6661a13d522b65c"
            ]
        ]
    },
    {
        "id": "93f0cb5d2011eaed",
        "type": "function",
        "z": "41996be6d96fa283",
        "name": "engagement",
        "func": "// Set a custom property with your variable\nmsg.engagement = msg.payload;\n\n// Make sure to return the msg object to pass it to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 340,
        "wires": [
            [
                "d6661a13d522b65c"
            ]
        ]
    },
    {
        "id": "b00b0d055cda8091",
        "type": "function",
        "z": "41996be6d96fa283",
        "name": "stress",
        "func": "// Set a custom property with your variable\nmsg.stress = msg.payload;\n\n// Make sure to return the msg object to pass it to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 400,
        "wires": [
            [
                "d6661a13d522b65c"
            ]
        ]
    },
    {
        "id": "55bf7d1a8b4bed26",
        "type": "function",
        "z": "41996be6d96fa283",
        "name": "relaxation",
        "func": "// Set a custom property with your variable\nmsg.relaxation = msg.payload;\n\n// Make sure to return the msg object to pass it to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 460,
        "wires": [
            [
                "d6661a13d522b65c"
            ]
        ]
    },
    {
        "id": "b081739a048357b0",
        "type": "function",
        "z": "41996be6d96fa283",
        "name": "smile",
        "func": "// Set a custom property with your variable\nmsg.smile = msg.payload;\n\n// Make sure to return the msg object to pass it to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 520,
        "wires": [
            [
                "d6661a13d522b65c"
            ]
        ]
    },
    {
        "id": "127e148b453eb551",
        "type": "function",
        "z": "41996be6d96fa283",
        "name": "frown",
        "func": "// Set a custom property with your variable\nmsg.frown = msg.payload;\n\n// Make sure to return the msg object to pass it to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 580,
        "wires": [
            [
                "d6661a13d522b65c"
            ]
        ]
    },
    {
        "id": "61044ea6da573530",
        "type": "function",
        "z": "41996be6d96fa283",
        "name": "surprise",
        "func": "// Set a custom property with your variable\nmsg.surprise = msg.payload;\n\n// Make sure to return the msg object to pass it to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 640,
        "wires": [
            [
                "d6661a13d522b65c"
            ]
        ]
    },
    {
        "id": "4332a6aba0827a29",
        "type": "function",
        "z": "41996be6d96fa283",
        "name": "clench",
        "func": "// Set a custom property with your variable\nmsg.clench = msg.payload;\n\n// Make sure to return the msg object to pass it to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 700,
        "wires": [
            [
                "d6661a13d522b65c"
            ]
        ]
    },
    {
        "id": "1d5ced30a3ab320c",
        "type": "function",
        "z": "41996be6d96fa283",
        "name": "ufNeutral",
        "func": "// Set a custom property with your variable\nmsg.ufNeutral = msg.payload;\n\n// Make sure to return the msg object to pass it to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 760,
        "wires": [
            [
                "d6661a13d522b65c"
            ]
        ]
    },
    {
        "id": "0a9d2c99cb1fb183",
        "type": "function",
        "z": "41996be6d96fa283",
        "name": "lfNeutral",
        "func": "// Set a custom property with your variable\nmsg.lfNeutral = msg.payload;\n\n// Make sure to return the msg object to pass it to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 820,
        "wires": [
            [
                "d6661a13d522b65c"
            ]
        ]
    },
    {
        "id": "600a21ba0629e7e8",
        "type": "inject",
        "z": "41996be6d96fa283",
        "name": "After 40 seconds",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "check",
        "payloadType": "str",
        "x": 1710,
        "y": 140,
        "wires": [
            [
                "21ec378b1cadc715"
            ]
        ]
    },
    {
        "id": "21ec378b1cadc715",
        "type": "function",
        "z": "41996be6d96fa283",
        "name": "Highest Emotions",
        "func": "let checkCounter = flow.get(\"checkCounter\") || 0;\nlet oneloop=0;\n// Increment the check counter if the incoming message payload is \"check\"\nif (msg.payload === \"check\") {\n    checkCounter += 1;\n    flow.set(\"checkCounter\", checkCounter);\n}\n\nif (checkCounter >=1){\n    // Ensure msg.averages exists and is an object\n    if (typeof msg.averages === \"object\" && msg.averages !== null) {\n        let highestEmotion = null;\n        let highestValue = -Infinity; // Start with the lowest possible number\n\n        // Iterate over each emotion in msg.averages\n        Object.keys(msg.averages).forEach(emotion => {\n            if (msg.averages[emotion] > highestValue) {\n                highestValue = msg.averages[emotion];\n                highestEmotion = emotion;\n            }\n        });\n\n\n       msg.payload = highestEmotion.toLowerCase();\n        // Set the highest emotion as the message payload\n       \n    } else {\n       return null;\n    }\n} else {\n    // If checkCounter is not >= 1, you might not want to send any message\n    return null;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 1,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 200,
        "wires": [
            [
                "0eea0dfb4784595d",
                "ec15e57ab89d90ed"
            ]
        ]
    },
    {
        "id": "0eea0dfb4784595d",
        "type": "debug",
        "z": "41996be6d96fa283",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2400,
        "y": 120,
        "wires": []
    }
]