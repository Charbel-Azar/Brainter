[
    {
        "id": "ee9757178de2cc83",
        "type": "tab",
        "label": "Mental Commands",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "41996be6d96fa283",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a1fe27bb3f369924",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "308f09ba75c30f2f",
        "type": "ui_tab",
        "name": "Brainter",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d7908651.24f9b8",
        "type": "ui_tab",
        "name": "Tab 1",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3085cb252d0df0c1",
        "type": "openaiApiKey",
        "name": "Personal"
    },
    {
        "id": "f1f542807e71d6ca",
        "type": "function",
        "z": "ee9757178de2cc83",
        "name": "Trigger Image Generation",
        "func": "// Retrieve the 'imageGenerated' flag from the context, defaulting to false if not set\nlet imageGenerated = context.get('imageGenerated') || false;\n\n// Check if an image has already been generated\nif (imageGenerated) {\n    // If an image was already generated, do nothing and return null to stop the flow\n    return null;\n}\n\n// Check the payload for a command and return an appropriate image generation payload\nif (msg.payload === 'Right') {\n    // Set the 'imageGenerated' flag to true to prevent further triggers\n    context.set('imageGenerated', true);\n    return { payload: 'generate me an image of a cat' };\n} else if (msg.payload === 'Left') {\n    // Set the 'imageGenerated' flag to true to prevent further triggers\n    context.set('imageGenerated', true);\n    return { payload: 'generate me an abstract image of the color red' };\n} else {\n    // If the payload is neither 'Right' nor 'Left', do nothing and return null\n    return null;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 340,
        "wires": [
            [
                "c99ee12a6cc850f0"
            ]
        ]
    },
    {
        "id": "fd3586c96f2c26c2",
        "type": "EMOTIV",
        "z": "ee9757178de2cc83",
        "name": "EMOTIV",
        "x": 160,
        "y": 420,
        "wires": [
            [
                "2e48835dac3ff48f"
            ]
        ]
    },
    {
        "id": "2e48835dac3ff48f",
        "type": "Profile-Name",
        "z": "ee9757178de2cc83",
        "name": "Profile Name",
        "profileName": "Charbel",
        "x": 360,
        "y": 360,
        "wires": [
            [
                "919dfb9ef8244c15",
                "c2fe43f5a6814f55"
            ]
        ]
    },
    {
        "id": "de45441b395d991d",
        "type": "function",
        "z": "ee9757178de2cc83",
        "name": "function 3",
        "func": "\n\n// Retrieve the 'commandTriggered' flag from the context, defaulting to false if not set\nlet commandTriggered = context.get('commandTriggered') || false;\n\n// Check if a command has already been triggered\nif (commandTriggered) {\n  // If a command was already triggered, do nothing and return null to stop the flow\n  return null;\n}\n\n// Check which command is received and if it passes the threshold\nif (msg.payload === \"Left\") {\n  msg.payload = \"Left\";\n  // Set the 'commandTriggered' flag to true to prevent further triggers\n  context.set('commandTriggered', true);\n} else if (msg.payload === \"Right\" ) {\n  msg.payload = \"Right\";\n  // Set the 'commandTriggered' flag to true to prevent further triggers\n  context.set('commandTriggered', true);\n} else {\n  // If neither command passes the threshold, do nothing and return null\n  return null;\n}\n\n// Return the message object to continue the flow\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 340,
        "wires": [
            [
                "f1f542807e71d6ca",
                "3a6c31c21d3e97b5"
            ]
        ]
    },
    {
        "id": "919dfb9ef8244c15",
        "type": "Mental-Command",
        "z": "ee9757178de2cc83",
        "name": "Mental Commands",
        "actionName": "left",
        "mcSen": 10,
        "x": 570,
        "y": 300,
        "wires": [
            [
                "8efe1e4d6744837e"
            ]
        ]
    },
    {
        "id": "c2fe43f5a6814f55",
        "type": "Mental-Command",
        "z": "ee9757178de2cc83",
        "name": "Mental Commands",
        "actionName": "right",
        "mcSen": 10,
        "x": 570,
        "y": 440,
        "wires": [
            [
                "a63ffa71846c76f3"
            ]
        ]
    },
    {
        "id": "c99ee12a6cc850f0",
        "type": "file",
        "z": "ee9757178de2cc83",
        "name": "Brainter",
        "filename": "C:\\Users\\charb\\Documents\\GitHub\\Brainter\\Image Generator\\mentalcommand.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1700,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "3a6c31c21d3e97b5",
        "type": "debug",
        "z": "ee9757178de2cc83",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 200,
        "wires": []
    },
    {
        "id": "8efe1e4d6744837e",
        "type": "switch",
        "z": "ee9757178de2cc83",
        "name": "Threshold 50",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "90",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 830,
        "y": 300,
        "wires": [
            [
                "bac8be6352a4ed2c"
            ]
        ]
    },
    {
        "id": "a63ffa71846c76f3",
        "type": "switch",
        "z": "ee9757178de2cc83",
        "name": "Threshold 50",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "70",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 830,
        "y": 440,
        "wires": [
            [
                "f962ac8fc85ee126",
                "17976bb15301df31"
            ]
        ]
    },
    {
        "id": "bac8be6352a4ed2c",
        "type": "function",
        "z": "ee9757178de2cc83",
        "name": "function 7",
        "func": "if (msg.payload > 90) {\n    msg.payload = \"Left\";\n    // Set the 'commandTriggered' flag to true to prevent further triggers\n\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 300,
        "wires": [
            [
                "de45441b395d991d"
            ]
        ]
    },
    {
        "id": "f962ac8fc85ee126",
        "type": "function",
        "z": "ee9757178de2cc83",
        "name": "function 8",
        "func": "if (msg.payload > 70) {\n    msg.payload = \"Right\";\n    // Set the 'commandTriggered' flag to true to prevent further triggers\n\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 440,
        "wires": [
            [
                "de45441b395d991d"
            ]
        ]
    },
    {
        "id": "17976bb15301df31",
        "type": "debug",
        "z": "ee9757178de2cc83",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 600,
        "wires": []
    },
    {
        "id": "5707331f2b6bb153",
        "type": "EMOTIV",
        "z": "41996be6d96fa283",
        "name": "EMOTIV",
        "x": 160,
        "y": 380,
        "wires": [
            [
                "1ce3629a6c9015ed"
            ]
        ]
    },
    {
        "id": "1ce3629a6c9015ed",
        "type": "Profile-Name",
        "z": "41996be6d96fa283",
        "name": "Profile Name",
        "profileName": "Charbel",
        "x": 340,
        "y": 320,
        "wires": [
            [
                "2996ef67db8d06a0",
                "f67c04937e09eef9",
                "c708aabacb13520f",
                "ed2c2b040137606a",
                "bd80ab7cf9ce5e6e",
                "5583fa93e96ebf90",
                "496cfd365981afe7",
                "ebc288f00686cac8",
                "bd31e3c92cb51fc9"
            ]
        ]
    },
    {
        "id": "2996ef67db8d06a0",
        "type": "Performance-Metric",
        "z": "41996be6d96fa283",
        "name": "Performance Metrics",
        "pm": "focus",
        "x": 640,
        "y": 180,
        "wires": [
            [
                "d6661a13d522b65c"
            ]
        ]
    },
    {
        "id": "f67c04937e09eef9",
        "type": "Performance-Metric",
        "z": "41996be6d96fa283",
        "name": "Performance Metrics",
        "pm": "excitement",
        "x": 660,
        "y": 240,
        "wires": [
            [
                "d6661a13d522b65c"
            ]
        ]
    },
    {
        "id": "d6661a13d522b65c",
        "type": "function",
        "z": "41996be6d96fa283",
        "name": "Find emotion",
        "func": "// Initialize an object to store the metrics\nlet metrics = context.get('metrics') || {\n    focus: 0,\n    excitement: 0,\n    interest: 0,\n    engagement: 0,\n    stress: 0,\n    relaxation: 0,\n    longTermExcitement: 0,\n    mn8Attention: 0,\n    mn8CognitiveStress: 0\n};\n\n// Update the metric based on the incoming message\nmetrics[msg.topic] = msg.payload;\n\n// Save the updated metrics back to the context\ncontext.set('metrics', metrics);\n\n// Define the weighted contributions for each emotion\nconst happiness = 0.35 * metrics.engagement + 0.35 * metrics.interest + 0.30 * metrics.relaxation;\nconst sadness = 0.40 * metrics.stress + 0.10 * metrics.engagement + 0.50 * metrics.relaxation;\n\n// Check if the threshold for happiness or sadness is exceeded\nif (happiness > 70 || sadness > 70) {\n    // Reset metrics after exceeding the threshold\n    context.set('metrics', {});\n\n    // Prepare the output message\n    let emotion = happiness > sadness ? \"Happy\" : \"Sad\";\n    let level = happiness > sadness ? happiness : sadness;\n\n    msg.payload = `${emotion} level is ${level}, which exceeds the threshold.`;\n    return msg; // Output the message and stop processing further metrics\n}\n\n// If no threshold is exceeded, do not output anything\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 220,
        "wires": [
            [
                "e9fde001f2b4e7ec"
            ]
        ]
    },
    {
        "id": "c708aabacb13520f",
        "type": "Performance-Metric",
        "z": "41996be6d96fa283",
        "name": "Performance Metrics",
        "pm": "interest",
        "x": 640,
        "y": 300,
        "wires": [
            [
                "d6661a13d522b65c"
            ]
        ]
    },
    {
        "id": "ed2c2b040137606a",
        "type": "Performance-Metric",
        "z": "41996be6d96fa283",
        "name": "Performance Metrics",
        "pm": "engagement",
        "x": 660,
        "y": 360,
        "wires": [
            [
                "d6661a13d522b65c"
            ]
        ]
    },
    {
        "id": "bd80ab7cf9ce5e6e",
        "type": "Performance-Metric",
        "z": "41996be6d96fa283",
        "name": "Performance Metrics",
        "pm": "stress",
        "x": 640,
        "y": 420,
        "wires": [
            [
                "d6661a13d522b65c"
            ]
        ]
    },
    {
        "id": "5583fa93e96ebf90",
        "type": "Performance-Metric",
        "z": "41996be6d96fa283",
        "name": "Performance Metrics",
        "pm": "relaxation",
        "x": 650,
        "y": 480,
        "wires": [
            [
                "d6661a13d522b65c"
            ]
        ]
    },
    {
        "id": "496cfd365981afe7",
        "type": "Performance-Metric",
        "z": "41996be6d96fa283",
        "name": "Performance Metrics",
        "pm": "longTermExcitement",
        "x": 690,
        "y": 540,
        "wires": [
            [
                "d6661a13d522b65c"
            ]
        ]
    },
    {
        "id": "ebc288f00686cac8",
        "type": "Performance-Metric",
        "z": "41996be6d96fa283",
        "name": "Performance Metrics",
        "pm": "mn8-attention",
        "x": 660,
        "y": 600,
        "wires": [
            [
                "d6661a13d522b65c"
            ]
        ]
    },
    {
        "id": "bd31e3c92cb51fc9",
        "type": "Performance-Metric",
        "z": "41996be6d96fa283",
        "name": "Performance Metrics",
        "pm": "mn8-cognitivestress",
        "x": 680,
        "y": 660,
        "wires": [
            [
                "d6661a13d522b65c"
            ]
        ]
    },
    {
        "id": "e9fde001f2b4e7ec",
        "type": "debug",
        "z": "41996be6d96fa283",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 220,
        "wires": []
    }
]